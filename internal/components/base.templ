package components

import (
	"context"
	"github.com/kkstas/tener/assets"
	"github.com/kkstas/tener/internal/model/user"
	"github.com/kkstas/tener/internal/url"
)

var (
	outCSSFilename    = assets.OutCSSFilename()
	stylesCSSFilename = assets.StylesCSSFilename()
)

templ darkMode() {
	<script>
		document.addEventListener('alpine:init', () => {
			Alpine.store('darkMode', {
				init() {
					this.on = this.shouldBeDark();
					window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", e => {
						if (!localStorage.darkMode) { this.on = this.shouldBeDark(); }
					});
				},

				shouldBeDark() {
					if (localStorage.darkMode === 'on' || localStorage.darkMode === 'off') {
						return localStorage.darkMode === 'on';
					}
					return window.matchMedia('(prefers-color-scheme: dark)').matches;
				},
				
				on: true,

				toggle() {
					localStorage.darkMode = this.shouldBeDark() ? 'off' : 'on';
					this.on = this.shouldBeDark();
				},

				sync() {
					if (this.shouldBeDark()) {
						document.documentElement.classList.add('dark');
						return;
					}
					document.documentElement.classList.remove('dark');
				}
			})
		})
	</script>
}

templ toggleDarkMode() {
	<div x-data class="flex items-center justify-end space-x-2 me-3 lg:me-5" x-effect="$store.darkMode.on; $store.darkMode.sync();">
		<input id="thisId" type="checkbox" name="switch" class="hidden" :checked="$store.darkMode.on"/>
		<label
			@click="$refs.switchButton.click(); $refs.switchButton.focus()"
			@keydown.d.ctrl.window.prevent.stop="$refs.switchButton.click();"
			:id="$id('switch')"
			:class="$store.darkMode.on ? 'text-zinc-500' : 'text-zinc-400'"
			class="text-xs my-auto pt-1 select-none font-mono"
		>
			Ctrl+D
		</label>
		<button
			x-ref="switchButton"
			type="button"
			@click="$store.darkMode.toggle()"
			:class="$store.darkMode.on ? 'bg-zinc-950/80' : 'bg-zinc-300'"
			class="relative inline-flex h-6 py-0.5 ml-4 rounded-full w-10 focus:shadow-outline focus:outline-none focus:outline-zinc-800/10 dark:focus:outline-zinc-200/30 focus:outline-1"
		>
			<span :class="$store.darkMode.on ? 'translate-x-[18px] bg-zinc-700' : 'translate-x-0.5 bg-white'" class="w-5 h-5 duration-200 ease-in-out rounded-full shadow-md"></span>
			<svg :class="$store.darkMode.on ? 'opacity-0' : 'opacity-100'" class="absolute text-zinc-400 ps-1 w-5 h-5 duration-200 ease-in-out bg-transparent" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z"></path></svg>
			<svg :class="$store.darkMode.on ? 'opacity-100' : 'opacity-0'" class="text-zinc-200 fill-zinc-200 translate-x-[22px] absolute w-3 h-5 duration-200 ease-in-out bg-transparent" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z"></path> </svg>
		</button>
	</div>
}

templ Nav(ctx context.Context, loggedIn bool, u user.User) {
	<nav
		x-data="{ mobileMenuIsOpen: false }"
		@click.away="mobileMenuIsOpen = false"
		class="bg-zinc-50 dark:bg-zinc-900"
		aria-label="menu"
	>
		<div
			class="
				px-6 py-4 flex items-center
				bg-zinc-50 dark:bg-black/20
				border-b border-zinc-300 dark:border-black/30
			"
		>
			<a href={ templ.SafeURL(url.Create(ctx, "home")) } class="text-2xl font-bold text-zinc-900 dark:text-white me-auto">tener</a>
			<!-- Desktop Menu -->
			@toggleDarkMode()
			<ul class="hidden items-center gap-4 md:flex">
				if loggedIn {
					<li>
						@UserCard(ctx, u)
					</li>
				} else {
					<li>
						<a
							href={ templ.SafeURL(url.Create(ctx, "login")) }
							class="pb-1 font-medium text-zinc-600 underline-offset-2 hover:text-black focus:outline-none focus:underline dark:text-zinc-300 dark:hover:text-white"
						>Log in</a>
					</li>
				}
			</ul>
			<!-- Mobile Menu Button -->
			<button @click="mobileMenuIsOpen = !mobileMenuIsOpen" :aria-expanded="mobileMenuIsOpen" :class="mobileMenuIsOpen ? 'fixed top-6 right-6 z-20' : null" type="button" class="flex text-zinc-600 dark:text-zinc-300 md:hidden" aria-label="mobile menu" aria-controls="mobileMenu">
				<svg x-cloak x-show="!mobileMenuIsOpen" xmlns="http://www.w3.org/2000/svg" fill="none" aria-hidden="true" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="size-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
				</svg>
				<svg x-cloak x-show="mobileMenuIsOpen" xmlns="http://www.w3.org/2000/svg" fill="none" aria-hidden="true" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="size-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
				</svg>
			</button>
			<!-- Mobile Menu -->
			<ul x-cloak x-show="mobileMenuIsOpen" x-transition:enter="transition motion-reduce:transition-none ease-out duration-300" x-transition:enter-start="-translate-y-full" x-transition:enter-end="translate-y-0" x-transition:leave="transition motion-reduce:transition-none ease-out duration-300" x-transition:leave-start="translate-y-0" x-transition:leave-end="-translate-y-full" id="mobileMenu" class="fixed max-h-svh overflow-y-auto inset-x-0 top-0 z-10 flex flex-col divide-y divide-zinc-300 rounded-b-md border-b border-zinc-300 bg-zinc-50 px-6 pb-6 pt-10 dark:divide-zinc-700 dark:border-zinc-700 dark:bg-zinc-900 md:hidden">
				if loggedIn {
					<li class="py-4">
						@userDisabledCard(u)
					</li>
					<li class="py-4">
						<a
							href={ templ.SafeURL(url.Create(ctx, "logout")) }
							class="w-full text-lg font-medium text-zinc-600 focus:underline dark:text-zinc-300"
						>Logout</a>
					</li>
				} else {
					<li class="py-4">
						<a
							href={ templ.SafeURL(url.Create(ctx, "login")) }
							class="w-full text-lg font-medium text-zinc-600 focus:underline dark:text-zinc-300"
						>Log in</a>
					</li>
				}
			</ul>
		</div>
	</nav>
}

templ reloadIfStale() {
	<script>
		const lastReload = new Date().toISOString().split('T')[0];
		window.addEventListener("focus", () => {
			const today = new Date().toISOString().split('T')[0];
			if (lastReload !== today) window.location.reload();
		})
	</script>
}

templ BaseHTML(ctx context.Context, loggedIn bool, u user.User) {
	<html class="dark">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="icon" type="image/svg+xml" href={ url.Create(ctx, "assets", "public", "icon.svg") }/>
			<style>[x-cloak] { display: none !important; }</style>
			<script src={ url.Create(ctx, "assets", "public", "js", "flatpickr-4.6.13.min.js") }></script>
			<script src={ url.Create(ctx, "assets", "public", "js", "htmx-2.0.2.min.js ") }></script>
			<script src={ url.Create(ctx, "assets", "public", "js", "htmx-ext-loading-states-2.0.0.js") }></script>
			<script defer src={ url.Create(ctx, "assets", "public", "js", "alpine-collapse-3.14.1.min.js ") }></script>
			<script defer src={ url.Create(ctx, "assets", "public", "js", "alpine-focus-3.14.1.min.js ") }></script>
			<script defer src={ url.Create(ctx, "assets", "public", "js", "alpine-3.14.1.min.js ") }></script>
			<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.min.js" integrity="sha512-CQBWl4fJHWbryGE+Pc7UAxWMUMNMWzWxF4SQo9CgkJIN1kx6djDQZjh3Y8SZ1d+6I+1zze6Z7kHXO7q3UyZAWw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
			<link rel="stylesheet" href={ url.Create(ctx, "assets", "public", "css", outCSSFilename) }/>
			<link rel="stylesheet" href={ url.Create(ctx, "assets", "public", "css", stylesCSSFilename) }/>
			<link rel="stylesheet" href={ url.Create(ctx, "assets", "public", "css", "flatpickr-dark-theme-4.6.13.css") }/>
			@darkMode()
			<title>Home</title>
		</head>
		<body hx-ext="loading-states" class="bg-zinc-50 dark:bg-zinc-900 text-zinc-800 dark:text-zinc-200">
			@reloadIfStale()
			@Nav(ctx, loggedIn, u)
			<div class="mx-5 my-3">
				{ children... }
			</div>
		</body>
	</html>
}
