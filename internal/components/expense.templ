package components

import (
	"context"
	"fmt"
	"strconv"

	"github.com/kkstas/tjener/internal/helpers"
	"github.com/kkstas/tjener/internal/model"
	"github.com/kkstas/tjener/internal/url"
)

templ ExpensesDateRangePicker(ctx context.Context) {
	<form
		hx-get={ url.Create(ctx, "expense", "all") }
		hx-target="#all-expenses-list"
		hx-trigger="change[target.value.includes(' to ')] from:#main-date-range-picker"
		hx-swap="outerHTML"
		class="relative w-full max-w-md mx-auto flex justify-end px-5"
	>
		<style>.dateRange { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-calendar" viewBox="0 0 16 16"><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5M1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"/></svg>'); background-position: center; background-repeat: no-repeat; } </style>
		<input
			id="main-date-range-picker"
			placeholder="Select Date Range"
			class="dateRange flex text-[0px] items-center justify-center w-10 h-10 bg-white border rounded-full shadow-sm cursor-pointer hover:bg-neutral-100 focus-visible:ring-gray-400 focus-visible:ring-2 focus-visible:outline-none active:bg-white border-neutral-200/70"
		/>
		<input type="hidden" id="main-date-range-picker-from" name="from" value={ helpers.MonthAgo() }/>
		<input type="hidden" id="main-date-range-picker-to" name="to" value={ helpers.DaysAgo(0) }/>
		<script>
			flatpickr("#main-date-range-picker", {
				mode: "range",
				dateFormat: "Y-m-d",
				defaultDate: [document.getElementById("main-date-range-picker-from").value, document.getElementById("main-date-range-picker-to").value],
				onClose: function(selectedDates, dateStr, instance) {
					instance.input.blur();
				},
				onChange: function(selectedDates, dateStr, instance) {
					function dateToISODateString(date) {
						return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
					}
					if (selectedDates.length === 2) {
						document.getElementById("main-date-range-picker-from").value = dateToISODateString(selectedDates[0]);
						document.getElementById("main-date-range-picker-to").value = dateToISODateString(selectedDates[1]);
					}
				}
			});
		</script>
	</form>
}

templ Expenses(ctx context.Context, expenses []model.Expense, currencies []string, categories []model.ExpenseCategory) {
	<div
		class="my-3 relative w-full max-w-md mx-auto text-sm font-normal bg-white border border-gray-200 divide-y divide-gray-200 rounded-md"
		id="all-expenses-list"
		hx-include="#main-date-range-picker-from, #main-date-range-picker-to"
	>
		for i := len(expenses) - 1; i >= 0; i-- {
			@Expense(ctx, expenses[i], currencies, categories)
		}
	</div>
}

templ Expense(ctx context.Context, expense model.Expense, currencies []string, categories []model.ExpenseCategory) {
	<div x-data="{ id: $id('accordion') }" class="expense-element cursor-pointer group">
		<button @click="setActiveAccordion(id)" class="flex items-center focus:outline-none justify-between w-full p-4 text-left select-none">
			<div class="flex flex-1 justify-between">
				<div class="flex flex-col justify-between">
					<div class="text-lg font-medium">{ expense.Name }</div>
					<div class="text-xs">{ expense.Category }</div>
				</div>
				<div class="text-end flex flex-col justify-between">
					<div class="text-lg font-medium">{ fmt.Sprintf("%.2f %s", expense.Amount, expense.Currency) }</div>
					<div class="text-xs">{ parseDate(expense.Date, "Monday, 02 Jan 2006") }</div>
				</div>
			</div>
		</button>
		<div x-show="activeAccordion==id" x-collapse x-cloak>
			<hr class="w-[80%] mx-auto mb-2"/>
			<div class="flex justify-center mb-2">
				<button
					type="button"
					class="mx-2 inline-flex items-center justify-center px-4 py-1 text-sm font-medium tracking-wide text-red-600 transition-colors duration-100 bg-white border-2 border-red-600 rounded-md hover:text-white hover:bg-red-600"
					hx-target="closest .expense-element"
					hx-delete={ url.Create(ctx, "expense", expense.SK) }
					hx-swap="delete"
					hx-confirm={ "Are you sure you want to delete this expense?\n\nName: " + expense.Name + "\nCategory: " + expense.Category + "\nAmount: " + fmt.Sprintf("%.2f %s", expense.Amount, expense.Currency) }
				>
					Delete	
				</button>
				@ExpenseEditButton(ctx, expense, currencies, categories)
			</div>
		</div>
	</div>
}

templ ExpenseEditButton(ctx context.Context, expense model.Expense, currencies []string, categories []model.ExpenseCategory) {
	<div
		x-data="{
			popoverOpen: false,
			popoverArrow: true,
			popoverPosition: 'bottom',
			popoverHeight: 0,
			popoverOffset: 8,
			popoverHeightCalculate() {
				this.$refs.popover.classList.add('invisible');
				this.popoverOpen=true;
				let that=this;
				$nextTick(function(){
					that.popoverHeight = that.$refs.popover.offsetHeight;
					that.popoverOpen=false;
					that.$refs.popover.classList.remove('invisible');
					that.$refs.popoverInner.setAttribute('x-transition', '');
					that.popoverPositionCalculate();
				});
			},
			popoverPositionCalculate(){
				if(window.innerHeight < (this.$refs.popoverButton?.getBoundingClientRect().top + this.$refs.popoverButton?.offsetHeight + this.popoverOffset + this.popoverHeight)){
					this.popoverPosition = 'top';
				} else {
					this.popoverPosition = 'bottom';
				}
			}
		}"
		x-init="
			that = this;
			window.addEventListener('resize', function(){
				popoverPositionCalculate();
			});
			$watch('popoverOpen', function(value){
				if(value) { popoverPositionCalculate(); document.getElementById('edit-expense-name-input').focus();  }
			});
		"
		class="relative"
	>
		<button
			x-ref="popoverButton"
			@click="popoverOpen=!popoverOpen"
			class="mx-2 inline-flex items-center justify-center px-4 py-1 text-sm font-medium tracking-wide text-blue-600 transition-colors duration-100 bg-white border-2 border-blue-600 rounded-md hover:text-white hover:bg-blue-600"
		>
			Edit
		</button>
		<div
			x-ref="popover"
			x-show="popoverOpen"
			x-init="setTimeout(function(){ popoverHeightCalculate(); }, 100);"
			x-trap.inert="popoverOpen"
			@click.away="popoverOpen=false;"
			@keydown.escape.window="popoverOpen=false"
			:class="{ 'top-0 mt-12' : popoverPosition == 'bottom', 'bottom-0 mb-12' : popoverPosition == 'top' }"
			class="absolute w-[300px] max-w-lg -translate-x-1/2 left-1/2"
			x-cloak
		>
			<div
				x-ref="popoverInner"
				x-show="popoverOpen"
				class="w-full p-4 bg-white border rounded-md shadow-sm border-neutral-200/70"
			>
				<div
					x-show="popoverArrow && popoverPosition == 'bottom'"
					class="absolute top-0 inline-block w-5 mt-px overflow-hidden -translate-x-2 -translate-y-2.5 left-1/2"
				>
					<div class="w-2.5 h-2.5 origin-bottom-left transform rotate-45 bg-white border-t border-l rounded-sm"></div>
				</div>
				<div
					x-show="popoverArrow  && popoverPosition == 'top'"
					class="absolute bottom-0 inline-block w-5 mb-px overflow-hidden -translate-x-2 translate-y-2.5 left-1/2"
				>
					<div class="w-2.5 h-2.5 origin-top-left transform -rotate-45 bg-white border-b border-l rounded-sm"></div>
				</div>
				<div class="grid gap-4">
					<div class="space-y-2">
						<h4 class="text-xl font-medium leading-none">Update expense</h4>
					</div>
					<form
						class="grid gap-2"
						hx-put={ url.Create(ctx, "expense", "edit", expense.SK) }
						hx-target="#all-expenses-list"
						hx-swap="outerHTML"
						x-data="{ formErrors: {} }"
						x-effect="if (popoverOpen) { formErrors = {}; $el.reset(); }"
						@htmx:after-request.camel="
							if (!event.detail.successful && typeof event.detail.xhr === 'object' && event.detail.xhr !== null && !Array.isArray(event.detail.xhr)) {
								formErrors = JSON.parse(event.detail.xhr.response);
								popoverOpen = false;
								return;
							}
						"
					>
						<div class="grid items-center grid-cols-3 gap-4">
							<label
								class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
								for="edit-expense-name-input"
							>Name</label>
							<input
								x-bind:class="formErrors.name && 'border-red-500'"
								class="flex w-full h-8 col-span-2 px-3 py-2 text-sm bg-transparent border rounded-md border-input ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-400 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
								id="edit-expense-name-input"
								type="text"
								name="name"
								value={ expense.Name }
								placeholder={ expense.Name }
								minlength={ strconv.Itoa(model.ExpenseNameMinLength) }
								maxlength={ strconv.Itoa(model.ExpenseNameMaxLength) }
								required
							/>
							<template x-for="err in formErrors.name">
								<p x-text="err" class="flex w-full col-span-3 text-red-500 text-xs italic mb-3 mt-0 p-0"></p>
							</template>
						</div>
						<div
							class="grid items-center grid-cols-3 gap-4"
						>
							<label
								class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
								for="edit-expense-category-input"
							>Category</label>
							<div class="flex w-full h-8 col-span-2 relative">
								<select
									id="edit-expense-category-input"
									name="category"
									class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:shadow-outline focus:outline-none focus:bg-white focus:outline-gray-800/10 focus:outline-1"
								>
									for _, category := range categories {
										if expense.Category == category.Name {
											<option selected>{ category.Name }</option>
										} else {
											<option>{ category.Name }</option>
										}
									}
								</select>
								<div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
									<svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"></path></svg>
								</div>
							</div>
							<template x-for="err in formErrors.category">
								<p x-text="err" class="flex w-full col-span-3 text-red-500 text-xs italic mb-3 mt-0 p-0"></p>
							</template>
						</div>
						<div
							class="grid items-center grid-cols-3 gap-4"
						>
							<label
								class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
								for="edit-expense-amount-input"
							>Amount</label>
							<input
								class="flex w-full h-8 col-span-2 px-3 py-2 text-sm bg-transparent border rounded-md border-input ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-400 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
								id="edit-expense-amount-input"
								name="amount"
								type="text"
								placeholder={ fmt.Sprintf("%.2f %s", expense.Amount, expense.Currency) }
								value={ fmt.Sprintf("%.2f", expense.Amount) }
								inputmode="decimal"
								pattern="^\d+([.,]\d{1,2})?$"
								title="Please enter a valid price (e.g., '24', '24.99', '24,99')"
								required
							/>
							<template x-for="err in formErrors.amount">
								<p x-text="err" class="flex w-full col-span-3 text-red-500 text-xs italic mb-3 mt-0 p-0"></p>
							</template>
						</div>
						<div
							class="grid items-center grid-cols-3 gap-4"
						>
							<label
								class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
								for="edit-expense-date-input"
							>Date</label>
							<input
								id="edit-expense-date-input"
								class="flex w-full h-8 col-span-2 px-3 py-2 text-sm bg-transparent border rounded-md border-input ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-400 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
								type="date"
								name="date"
								value={ expense.Date }
								required
							/>
							<template x-for="err in formErrors.date">
								<p x-text="err" class="flex w-full col-span-3 text-red-500 text-xs italic mb-3 mt-0 p-0"></p>
							</template>
						</div>
						<div
							class="grid items-center grid-cols-3 gap-4"
						>
							<label
								class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
								for="edit-expense-currency-input"
							>Currency</label>
							<div class="flex w-full h-8 col-span-2 relative">
								<select
									id="edit-expense-currency-input"
									class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:shadow-outline focus:outline-none focus:bg-white focus:outline-gray-800/10 focus:outline-1"
									name="currency"
								>
									for _, currency := range currencies {
										if expense.Currency == currency {
											<option selected>{ currency }</option>
										} else {
											<option>{ currency }</option>
										}
									}
								</select>
								<div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
									<svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"></path></svg>
								</div>
							</div>
							<template x-for="err in formErrors.currency">
								<p x-text="err" class="flex w-full col-span-3 text-red-500 text-xs italic mb-3 mt-0 p-0"></p>
							</template>
						</div>
						<button
							type="submit"
							class="mt-3 inline-flex items-center justify-center px-4 py-2 text-sm font-medium tracking-wide text-white transition-colors duration-200 bg-blue-500 rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-offset-2 focus:ring-blue-700 focus:shadow-outline focus:outline-none"
						>Submit</button>
					</form>
				</div>
			</div>
		</div>
	</div>
}
