package components

import (
	"context"
	"fmt"
	"slices"
	"time"

	"github.com/kkstas/tjener/internal/model"
	"github.com/kkstas/tjener/internal/url"
)

const (
	buttonStyles                       = "bg-white hover:bg-gray-100 text-gray-800 font-medium py-1 px-3 border border-gray-400 rounded shadow"
	inputStyles                        = "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline focus:outline-gray-800/20 focus:outline-1"
	singleExpenseContainerStyles       = "border border-gray-300 px-2 pt-2 rounded mt-2 bg-white"
	insideSingleExpenseContainerStyles = "flex flex-row place-items-center overflow-x-scroll break-words"
)

func parseTime(timestamp string) string {
	t, err := time.Parse("2006-01-02", timestamp)
	if err != nil {
		return err.Error()
	}
	return t.Local().Format("Monday, 02 Jan")
}

type expenseDay struct {
	date     string
	expenses []model.Expense
}

func parseExpensesIntoExpenseDays(expenses []model.Expense) []expenseDay {
	days := make(map[string][]model.Expense)

	for _, expense := range expenses {
		days[expense.SK[:10]] = append(days[expense.SK[:10]], expense)
	}

	keys := make([]string, 0, len(days))

	for k := range days {
		keys = append(keys, k)
	}
	slices.Sort(keys)

	expenseDays := make([]expenseDay, 0, len(keys))

	for i := len(keys) - 1; i >= 0; i-- {
		expenseDays = append(expenseDays, expenseDay{date: keys[i], expenses: days[keys[i]]})
	}
	return expenseDays
}

templ SingleExpense(ctx context.Context, expense model.Expense) {
	<div hx-target="this" class={ singleExpenseContainerStyles }>
		<div
			class={ insideSingleExpenseContainerStyles,
			"no-scroll",
			"[&>div>label]:text-xs [&>div>label]:text-gray-700 [&>div]:min-w-5" }
		>
			<div class={ "flex-1 ps-2 pb-2" }>
				<label>Name</label>
				if expense.Name == "" {
					<div>-</div>
				} else {
					<div>{ expense.Name }</div>
				}
			</div>
			<div class={ "flex-1 ps-2 pb-2" }>
				<label>Category</label>
				<div>{ expense.Category }</div>
			</div>
			<div class={ "flex-1 ps-2 pb-2" }>
				<label>Amount</label>
				<div>{ fmt.Sprintf("%.2f %s", expense.Amount, expense.Currency) }</div>
			</div>
			<button
				class="p-1 pe-2"
				hx-get={ url.Create(ctx, "expense", "edit", expense.SK) }
				hx-swap="outerHTML"
			>
				<svg class="w-4 h-4 p-0 m-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6"><path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10"></path></svg>
			</button>
			<button
				class="p-1"
				hx-delete={ url.Create(ctx, "expense", expense.SK) }
				hx-swap="delete"
				hx-confirm={ "Are you sure you want to delete this expense?\n\nName: " + expense.Name + "\nCategory: " + expense.Category + "\nAmount: " + fmt.Sprintf("%.2f %s", expense.Amount, expense.Currency) }
			>
				<svg class="w-4 h-4 p-0 m-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path></svg>
			</button>
		</div>
	</div>
}

templ EditSingleExpense(ctx context.Context, expense model.Expense, categories []model.ExpenseCategory) {
	<form hx-put={ url.Create(ctx, "expense", "edit", expense.SK) } hx-target="this" hx-swap="outerHTML" class={ singleExpenseContainerStyles }>
		<div class={ insideSingleExpenseContainerStyles }>
			<div class={ "flex-1 min-w-5 p-2" }>
				<label>Name</label>
				<input class={ inputStyles } type="text" name="name" value={ expense.Name }/>
			</div>
			<div class={ "flex-1 min-w-5 p-2" }>
				<label>Category</label>
				<div class="relative">
					<select
						name="category"
						class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:shadow-outline focus:outline-none focus:bg-white focus:outline-gray-800/10 focus:outline-1"
					>
						for _, category := range categories {
							if expense.Category == category.SK {
								<option selected>{ category.SK }</option>
							} else {
								<option>{ category.SK }</option>
							}
						}
					</select>
					<div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
						<svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"></path></svg>
					</div>
				</div>
			</div>
			<div class={ "flex-1 min-w-5 p-2" }>
				<label>Amount</label>
				<input class={ inputStyles } type="text" name="amount" value={ fmt.Sprint(expense.Amount) }/>
			</div>
			<div class={ "flex-1 min-w-5 p-2" }>
				<label>Currency</label>
				<input class={ inputStyles } type="text" name="currency" value={ expense.Currency }/>
			</div>
		</div>
		<div class={ " w-full flex justify-center" }>
			<button class={ buttonStyles, "mx-1" }>Submit</button>
			<button class={ buttonStyles, "mx-1" } hx-get={ url.Create(ctx, "expense", expense.SK) }>Cancel</button>
		</div>
	</form>
}

templ ExpensesContainer(ctx context.Context, expenses []model.Expense) {
	<div id="expenses-container" class="mx-auto lg:max-w-screen-md">
		for _, expenseDay := range parseExpensesIntoExpenseDays(expenses) {
			<div>
				<p class="text-center mt-5 text-sm font-medium">{ parseTime(expenseDay.date) }</p>
				for _, el := range expenseDay.expenses {
					@SingleExpense(ctx, el)
				}
			</div>
		}
	</div>
}

templ Page(ctx context.Context, expenses []model.Expense) {
	@BaseHTML(ctx) {
		<div class="w-full flex justify-center">
			<a class={ buttonStyles } href={ templ.URL(url.Create(ctx, "expense", "create")) }>
				<p>Create new expense</p>
			</a>
		</div>
		@ExpensesContainer(ctx, expenses)
	}
}
