package components

import (
	"context"
	"github.com/kkstas/tener/internal/helpers"
	"github.com/kkstas/tener/internal/model/expense"
	"github.com/kkstas/tener/internal/model/expensecategory"
	"github.com/kkstas/tener/internal/model/user"
	"github.com/kkstas/tener/internal/url"
)

templ ExpenseDateRangePicker(ctx context.Context) {
	<form
		hx-get={ url.Create(ctx, "json", "expense", "all") }
		hx-trigger="change[target._flatpickr.selectedDates.length === 2] from:#main-date-range-picker"
		hx-swap="none"
		hx-include="#categories"
		@htmx:after-request.camel="
			console.log('@htmx:after-request.camel triggered from ExpenseDateRangePicker');
			if (event.detail.successful && event.detail.xhr.responseURL.includes($el.getAttribute('hx-get'))) {
				const parsed = JSON.parse(event.detail.xhr.response);
				categories = parsed.categories;
				expenses = parsed.expenses;
				users = parsed.users;
				return;
			}
		"
		class="my-1 w-36 text-zinc-700 dark:text-zinc-200 cursor-pointer
			border border-1 border-zinc-200 dark:border-zinc-700 rounded-md overflow-hidden"
	>
		<input type="hidden" id="main-date-range-picker-from" name="from" value={ helpers.GetFirstDayOfCurrentMonth() }/>
		<input type="hidden" id="main-date-range-picker-to" name="to" value={ helpers.DaysAgo(0) }/>
		<div
			tabindex="0"
			class="flatpickr flex group
				group-focus:shadow-outline group-focus:outline-none group-focus:outline-zinc-800/10 dark:group-focus:outline-zinc-200/30 group-focus:outline-1
				bg-zinc-50 dark:bg-zinc-800"
			@keydown.enter="document.querySelector('#main-date-range-picker')._flatpickr.toggle();"
			@click.self="document.querySelector('#main-date-range-picker')._flatpickr.toggle();"
			@keydown.escape.stop="document.querySelector('#main-date-range-picker')._flatpickr.close();"
		>
			<input
				tabindex="-1"
				id="main-date-range-picker"
				class="cursor-pointer
					w-full appearance-none
					border border-transparent bg-transparent
					ps-3 py-2 text-xs
					focus-visible:outline-none"
			/>
			<svg @click.self="document.querySelector('#main-date-range-picker')._flatpickr.toggle();" class="my-auto me-3" width="16" height="16" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5M1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"></path></svg>
		</div>
		<script>
			function dateToISODateString(date) {
				return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;
			}

			flatpickr("#main-date-range-picker", {
				mode: "range",
				dateFormat: "Y-m-d",
				defaultDate: [document.getElementById("main-date-range-picker-from").value, document.getElementById("main-date-range-picker-to").value],
				altInput: true,
				altFormat: "j M",
				maxDate: "today",
				onClose: function(selectedDates, dateStr, instance) {
					instance.input.blur();
				},
				onChange: function(selectedDates, dateStr, instance) {
					if (selectedDates.length === 2) {
						document.getElementById("main-date-range-picker-from").value = dateToISODateString(selectedDates[0]);
						document.getElementById("main-date-range-picker-to").value = dateToISODateString(selectedDates[1]);
					}
				}
			});
		</script>
	</form>
}

templ ExpenseCategoryFilter2(ctx context.Context, categories []string) {
	<div class="my-1 pe-1" x-data={ toJSON(map[string][]string{"options": categories}) }>
		<div
			id="expense-category-filter"
			hx-get={ url.Create(ctx, "json", "expense", "all") }
			hx-trigger="reload-expenses"
			hx-swap="none"
			hx-include="#main-date-range-picker-from, #main-date-range-picker-to, #categories"
			x-data="{
				isOpen: false,
				openedWithKeyboard: false,
				selectedOptions: [],
				setLabelText() {
					const count = this.selectedOptions.length;
					if (count === 0) return 'All categories'; // if there are no selected options
					return this.selectedOptions.join(', '); // join the selected options with a comma
				},
				highlightFirstMatchingOption(pressedKey) {
					if (pressedKey === 'Enter') return // if Enter pressed, do nothing

					// find and focus the option that starts with the pressed key
					const option = this.options.find((item) => item.toLowerCase().startsWith(pressedKey.toLowerCase()));
					if (option) {
						const index = this.options.indexOf(option)
						const allOptions = document.querySelectorAll('.combobox-option')
						if (allOptions[index]) {
							allOptions[index].focus()
						}
					}
				},
				handleOptionToggle(option) {
					if (option.checked) {
						this.selectedOptions.push(option.value)
					} else {
						// remove the unchecked option from the selectedOptions array
						this.selectedOptions = this.selectedOptions.filter(
							(opt) => opt !== option.value,
						)
					}
					// set the value of the hidden field to the selectedOptions array
					this.$refs.hiddenTextField.value = this.selectedOptions.join(';');
				},
				handleClose() {
					if (!this.isOpen) {
						this.$el.dispatchEvent(new Event('reload-expenses', { bubbles: true }));
					}
				},
			}"
			class="w-full max-w-xs flex flex-col gap-1"
			x-on:keydown="highlightFirstMatchingOption($event.key); handleClose();"
			x-on:keydown.esc.window="isOpen = false, openedWithKeyboard = false; handleClose();"
			x-on:click.outside="if (isOpen) {
				isOpen = false;
				openedWithKeyboard = false;
				handleClose();
			}"
			@htmx:after-request.camel="
				console.log('@htmx:after-request.camel triggered from ExpenseCategoryFilter');
				if (event.detail.successful && event.detail.xhr.responseURL.includes($el.getAttribute('hx-get'))) {
					const parsed = JSON.parse(event.detail.xhr.response);
					categories = parsed.categories;
					expenses = parsed.expenses;
					users = parsed.users;
					return;
				}
			"
		>
			<div class="relative">
				<!-- trigger button  -->
				<button
					type="button"
					role="combobox"
					class="inline-flex items-center justify-between gap-2 whitespace-nowrap
						h-9 ps-3 pe-2 min-w-32 max-w-48 md:max-w-60 text-zinc-700 dark:text-zinc-200 text-xs cursor-pointer
						group-focus:shadow-outline group-focus:outline-none group-focus:outline-zinc-800/10 dark:group-focus:outline-zinc-200/30 group-focus:outline-1
						bg-zinc-50 dark:bg-zinc-800
						border border-1 border-zinc-200 dark:border-zinc-700 rounded-md"
					aria-haspopup="listbox"
					aria-controls="categoriesList"
					x-on:click="isOpen = ! isOpen"
					x-on:keydown.down.prevent="openedWithKeyboard = true"
					x-on:keydown.enter.prevent="openedWithKeyboard = true"
					x-on:keydown.space.prevent="openedWithKeyboard = true"
					x-bind:aria-label="setLabelText()"
					x-bind:aria-expanded="isOpen || openedWithKeyboard"
				>
					<span class="w-full font-normal text-start overflow-hidden text-ellipsis  whitespace-nowrap" x-text="setLabelText()"></span>
					<!-- Chevron  -->
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="size-5">
						<path fill-rule="evenodd" d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd"></path>
					</svg>
				</button>
				<!-- hidden input to grab the selected value  -->
				<input
					id="categories"
					name="categories"
					type="text"
					x-ref="hiddenTextField"
					x-on:change="$dispatch('reload-expenses', { selectedCategories: selectedOptions })"
					hidden
				/>
				<ul x-cloak x-show="isOpen || openedWithKeyboard" id="categoriesList" class="absolute z-10 left-0 top-11 flex max-h-44 w-full flex-col overflow-hidden overflow-y-auto border-zinc-300 bg-zinc-50 py-1.5 dark:border-zinc-700 dark:bg-zinc-900 border rounded-md" role="listbox" x-on:click.outside="isOpen = false, openedWithKeyboard = false" x-on:keydown.down.prevent="$focus.wrap().next()" x-on:keydown.up.prevent="$focus.wrap().previous()" x-transition x-trap="openedWithKeyboard">
					<template x-for="(item, index) in options" x-bind:key="item">
						<!-- option  -->
						<li role="option">
							<label class="flex cursor-pointer items-center gap-2 px-4 py-3 text-xs font-medium text-zinc-600 hover:bg-zinc-950/5 has-[:focus]:bg-zinc-950/5 dark:text-zinc-300 dark:hover:bg-white/5 dark:has-[:focus]:bg-white/5 [&:has(input:checked)]:text-zinc-900 dark:[&:has(input:checked)]:text-white [&:has(input:disabled)]:cursor-not-allowed [&:has(input:disabled)]:opacity-75" x-bind:for="'checkboxOption' + index">
								<div class="relative flex items-center">
									<input type="checkbox" class="combobox-option before:content[''] peer relative size-4 cursor-pointer appearance-none overflow-hidden border border-zinc-300 bg-zinc-50 before:absolute before:inset-0 checked:border-black checked:before:bg-black focus:outline focus:outline-2 focus:outline-offset-2 focus:outline-zinc-800 checked:focus:outline-black active:outline-offset-0 disabled:cursor-not-allowed dark:border-zinc-700 rounded dark:bg-zinc-900 dark:checked:border-white dark:checked:before:bg-white dark:focus:outline-zinc-300 dark:checked:focus:outline-white" x-on:change="handleOptionToggle($el)" x-on:keydown.enter.prevent="$el.checked = ! $el.checked; handleOptionToggle($el)" x-bind:value="item" x-bind:id="'checkboxOption' + index"/>
									<!-- Checkmark  -->
									<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke="currentColor" fill="none" stroke-width="4" class="pointer-events-none invisible absolute left-1/2 top-1/2 size-3 -translate-x-1/2 -translate-y-1/2 text-zinc-100 peer-checked:visible dark:text-black" aria-hidden="true">
										<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5"></path>
									</svg>
								</div>
								<span x-text="item"></span>
							</label>
						</li>
					</template>
				</ul>
			</div>
		</div>
	</div>
}

templ Home2(ctx context.Context, expenses []expense.Expense, paymentMethods []string, categories []expensecategory.Category, u user.User, users map[string]user.User, monthlySums []expense.MonthlySum) {
	@BaseHTML(ctx, true, u) {
		<div
			x-data="{
				activeAccordion: '',
				setActiveAccordion(id) { this.activeAccordion = (this.activeAccordion == id) ? '' : id }
			}"
			@keydown.escape.window="
				activeAccordion = '';
				document.querySelector('#main-date-range-picker')._flatpickr.close();
			"
		>
			<div
				class="my-3 relative w-full max-w-md mx-auto"
				x-data={ toJSON(map[string]any{
					"categories": categories,
					"expenses": expenses,
					"monthlySums": monthlySums,
					"paymentMethods": paymentMethods,
					"users": users,
					"urlStart": url.Create(ctx),
				}) }
				x-init="
					categories = categories ?? [];
					expenses = expenses ?? [];
					monthlySums = monthlySums ?? [];
					paymentMethods = paymentMethods ?? [];
					users = users ?? {};
				"
			>
				<div x-init="$watch('expenses', () => document.getElementById('monthsBarChartContainer').dispatchEvent(new CustomEvent('reload-chart')))">
					@MonthlySumsChart(ctx, expense.TransformToChartData(monthlySums))
				</div>
				@CreateExpenseContainer2(ctx, paymentMethods, categories)
				<div class="flex justify-end pb-1">
					@ExpenseCategoryFilter2(ctx, extractCategories(expenses))
					@ExpenseDateRangePicker(ctx)
				</div>
				<div class="text-sm font-normal bg-white dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700 divide-y divide-zinc-200 dark:divide-zinc-700 rounded-md divide-y-reverse overflow-hidden">
					<template x-for="exp in expenses" :key="exp.SK">
						@Expense2(ctx, paymentMethods, categories)
					</template>
				</div>
			</div>
		</div>
	}
}
